-- table: provision_hosting_certificate_create
-- description: This table is to provision a certificate for an AWS hosting order
CREATE TABLE provision_hosting_certificate_create (
  hosting_id              UUID NOT NULL,
  domain_name             TEXT NOT NULL,
  body                    TEXT,
  chain                   TEXT,
  private_key             TEXT,
  not_before              TIMESTAMPTZ,
  not_after               TIMESTAMPTZ,
  PRIMARY KEY (id),
  FOREIGN KEY (hosting_id) REFERENCES order_item_create_hosting
) INHERITS (class.audit_trail, class.provision);

-- starts the hosting certificate create order provision
CREATE TRIGGER provision_hosting_certificate_create_job_tg
  AFTER INSERT ON provision_hosting_certificate_create
  FOR EACH ROW WHEN (
    NEW.status_id = tc_id_from_name('provision_status', 'pending') 
  ) EXECUTE PROCEDURE provision_hosting_certificate_create_job();

-- Trigger when the operation is successful
CREATE TRIGGER provision_hosting_certificate_create_success_tg
  AFTER UPDATE ON provision_hosting_certificate_create
  FOR EACH ROW WHEN (
    OLD.status_id <> NEW.status_id
    AND NEW.status_id = tc_id_from_name('provision_status', 'completed')
  ) EXECUTE PROCEDURE provision_hosting_certificate_create_success();

-- Trigger to keep hosting status up to date
CREATE TRIGGER provision_hosting_certificate_create_update_hosting_status_tg
  AFTER UPDATE ON provision_hosting_certificate_create
  FOR EACH ROW WHEN (
    OLD.status_id <> NEW.status_id
    AND NEW.status_id = tc_id_from_name('provision_status', 'pending_action')
  ) EXECUTE PROCEDURE provision_hosting_certificate_create_update_hosting_status();

-- Trigger to remove hosting record if we failed certificate creation
CREATE TRIGGER provision_hosting_certificate_create_failure_tg
    AFTER UPDATE ON provision_hosting_certificate_create
    FOR EACH ROW WHEN (
        OLD.status_id <> NEW.status_id AND
        NEW.status_id = tc_id_from_name('provision_status', 'failed')
    ) EXECUTE PROCEDURE mark_hosting_record_failed();

-- table: provision_hosting_create
-- description: This table is to provision hosting order with AWS
CREATE TABLE provision_hosting_create (
  hosting_id              UUID NOT NULL,
  domain_name             TEXT NOT NULL,
  region_id               UUID NOT NULL,
  client_id               UUID NOT NULL,
  product_id              UUID NOT NULL,
  certificate_id          UUID,
  external_order_id       TEXT,
  external_client_id      TEXT,
  client_username         TEXT,
  hosting_status_id       UUID REFERENCES hosting_status,
  is_active               BOOLEAN NOT NULL DEFAULT FALSE,
  is_deleted              BOOLEAN NOT NULL DEFAULT FALSE,
  FOREIGN KEY (tenant_customer_id) REFERENCES tenant_customer,
  PRIMARY KEY (id)
) INHERITS (class.audit_trail, class.provision);
COMMENT ON COLUMN provision_hosting_create.external_order_id IS 'unique order id generated by the external hosting backend';

-- starts the hosting create order provision
CREATE TRIGGER provision_hosting_create_job_tg
  AFTER INSERT ON provision_hosting_create
  FOR EACH ROW WHEN (
    NEW.status_id = tc_id_from_name('provision_status', 'pending') 
  ) EXECUTE PROCEDURE provision_hosting_create_job();

-- Trigger when the operation is successful
CREATE TRIGGER provision_hosting_create_success_tg
  AFTER UPDATE ON provision_hosting_create
  FOR EACH ROW WHEN (
    OLD.status_id <> NEW.status_id
    AND NEW.status_id = tc_id_from_name('provision_status', 'completed')
  ) EXECUTE PROCEDURE provision_hosting_create_success();

-- Trigger to delete a hosting record if sending the hosting request to SAAS fails
CREATE TRIGGER provision_hosting_create_failure_tg
    AFTER UPDATE ON provision_hosting_create
    FOR EACH ROW WHEN (
        OLD.status_id <> NEW.status_id AND
        NEW.status_id = tc_id_from_name('provision_status', 'failed')
    ) EXECUTE PROCEDURE mark_hosting_record_failed();

