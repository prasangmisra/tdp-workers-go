// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	mail "net/mail"

	esender "github.com/tucowsinc/tdp-notifications/email-sender-service/internal/app/model/esender"

	mock "github.com/stretchr/testify/mock"
)

// EmailSender is an autogenerated mock type for the iEmailSender type
type EmailSender struct {
	mock.Mock
}

// SendEmail provides a mock function with given fields: ctx, msg, from, replyTo, to, cc, bcc
func (_m *EmailSender) SendEmail(ctx context.Context, msg esender.Message, from mail.Address, replyTo mail.Address, to esender.Addresses, cc esender.Addresses, bcc esender.Addresses) error {
	ret := _m.Called(ctx, msg, from, replyTo, to, cc, bcc)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, esender.Message, mail.Address, mail.Address, esender.Addresses, esender.Addresses, esender.Addresses) error); ok {
		r0 = rf(ctx, msg, from, replyTo, to, cc, bcc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmailSender creates a new instance of EmailSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailSender {
	mock := &EmailSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
