BEGIN;

-- start testing
SELECT * FROM no_plan();

SELECT * INTO TEMP _tenant_customer FROM v_tenant_customer LIMIT 1;

-- set fee_check_allowed to true to create two validation jobs
Update v_attribute
SET value=true
WHERE key='tld.lifecycle.fee_check_allowed'
    AND tld_name = 'sexy'
    AND tenant_id=(SELECT tenant_id FROM _tenant_customer);


-- create an order
WITH o AS (
    INSERT INTO "order"(
                        tenant_customer_id,
                        type_id
        )
        VALUES(
                  (SELECT id FROM _tenant_customer),
                  (SELECT id FROM v_order_type WHERE product_name='domain' AND name='delete')
              ) RETURNING *
)
SELECT * INTO TEMP _delete_order FROM o;


SELECT lives_ok($$
    INSERT INTO order_item_delete_domain(
        order_id,
        name
    ) VALUES(
        (SELECT id FROM _delete_order),
        'example-to-be-deleted.sexy'
    )
$$);


SELECT lives_ok($$
    UPDATE "order" SET status_id = order_next_status((SELECT id FROM _delete_order),TRUE) WHERE id=(SELECT id FROM _delete_order);
$$,'move order to next status (pending->processing)');

SELECT lives_ok($$
    UPDATE provision_domain_delete SET in_redemption_grace_period = TRUE
        WHERE domain_name = 'example-to-be-deleted.sexy';
$$);

SELECT lives_ok($$
    UPDATE job SET status_id = tc_id_from_name('job_status','completed')
        WHERE status_id = tc_id_from_name('job_status','submitted') AND type_id = tc_id_from_name('job_type','provision_domain_delete');
$$);


SELECT collect_tap(
               cmp_ok(d.name,'=',dd.domain_name,'domain name in order matches provision_delete_domain')
       )
FROM v_order_delete_domain dd
         JOIN domain d ON d.id = dd.domain_id
         JOIN provision_domain_delete pdd ON pdd.domain_id = d.id;

-- create an order
WITH o AS (
    INSERT INTO "order"(
                        tenant_customer_id,
                        type_id
        )
        VALUES(
                  (SELECT id FROM _tenant_customer),
                  (SELECT id FROM v_order_type WHERE product_name='domain' AND name='redeem')
              ) RETURNING *
)
SELECT * INTO TEMP _redeem_order FROM o;

SELECT lives_ok($$
    INSERT INTO domain_rgp_status(
        domain_id,
        status_id
    ) VALUES (
        (SELECT id FROM domain WHERE name = 'example-to-be-deleted.sexy'),
        tc_id_from_name('rgp_status', 'redemption_grace_period')
    );
$$);

WITH oi AS (
    INSERT INTO order_item_redeem_domain (order_id, name)
        VALUES (
                   (SELECT id FROM _redeem_order),
                   'example-to-be-deleted.sexy'
               )
        RETURNING *
)
SELECT * INTO TEMP _redeem_order_item FROM oi;

SELECT lives_ok($$
    SELECT * FROM _redeem_order_item;
$$);

SELECT lives_ok($$
    UPDATE "order" SET status_id = order_next_status((SELECT id FROM _redeem_order),TRUE) WHERE id=(SELECT id FROM _redeem_order);
$$,'move order to next status (pending->processing)');

-- there should be 1 job created to validate domain
SELECT cmp_ok((
                  SELECT COUNT(*)::INT
                  FROM v_job vj
                           JOIN redeem_domain_plan tidp ON tidp.id = vj.reference_id
                  WHERE tidp.order_item_id = (SELECT id FROM _redeem_order_item)
                    AND vj.job_type_name = 'validate_domain_premium'),
              '=',
              1::INT
       );


-- let's update the validate_domain_available job to see if it changes to complete
SELECT lives_ok($$
    UPDATE job
    SET status_id = tc_id_from_name('job_status','failed')
    WHERE id = (
        SELECT job_id
        FROM v_job vj
        JOIN redeem_domain_plan tidp ON tidp.id = vj.reference_id
        WHERE tidp.order_item_id = (SELECT id FROM _redeem_order_item)
            AND vj.job_type_name = 'validate_domain_premium'
            AND vj.job_status_name = 'submitted'
    )
$$);


-- there should be 3 items failed
SELECT cmp_ok(
    (SELECT COUNT(*)::INT FROM f_order_item_plan((SELECT id FROM _redeem_order_item)) WHERE plan_status_name = 'failed'),
    '=',
    1::INT
);


-- end testing
SELECT * FROM finish(true);


ROLLBACK;
