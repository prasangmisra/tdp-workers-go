BEGIN;


-- start testing
SELECT * FROM no_plan();

-- First, we check the schema itself, to ensure it looks like we expect

SELECT has_table('order');
SELECT has_table('order_item_transfer_in_domain');


SELECT * INTO TEMP _tenant_customer FROM v_tenant_customer LIMIT 1;

SELECT accreditation_tld_id as id INTO TEMP _acc_tld
FROM v_accreditation_tld
WHERE tld_name = 'help'
  AND tenant_id=(SELECT tenant_id FROM _tenant_customer)
  AND is_default;

-- create an order
WITH o AS (
    INSERT INTO "order"(
        tenant_customer_id,
        type_id
    )
    VALUES(
        (SELECT id FROM v_tenant_customer LIMIT 1),
        (SELECT id FROM v_order_type WHERE product_name='domain' AND name='transfer_in')
    ) RETURNING *
)
SELECT * INTO TEMP _order FROM o;


-- check that the order ID exists
SELECT ok((SELECT LENGTH(id::TEXT) > 0 FROM "order" WHERE id = (SELECT id FROM _order)),'is TRUE!');

-- by default order should have a created status
SELECT is(
    (SELECT name FROM order_status WHERE id=(SELECT status_id FROM _order)),
    'created',
    'order status is ''created'' by default'
);


-- now we add the order item (order_item_transfer_in_domain)
WITH td AS (
    INSERT INTO order_item_transfer_in_domain(
        name,
        accreditation_tld_id,
        transfer_period,
        auth_info,
        order_id
        ) VALUES(
        FORMAT('tdp-test-hello-%s.help',EXTRACT(epoch from NOW())::INT),
        (SELECT id FROM _acc_tld),
        1,
        'xyzabc',
        (SELECT id FROM _order)
        ) RETURNING *
)
SELECT * INTO TEMP _oi_transfer_domain FROM td;

-- disable validation for transfer domain
SELECT lives_ok($$
    UPDATE order_item_strategy SET is_validation_required = FALSE WHERE order_type_id = (SELECT type_id FROM _order);
$$,'bypass domain validation for this test');

-- the order should now be set to processing
SELECT lives_ok($$
    UPDATE "order" SET status_id = order_next_status((SELECT id FROM _order),TRUE) WHERE id=(SELECT id FROM _order);
$$,'move order to next status (pending->processing)');

-- order must be in status processing
SELECT cmp_ok(
    (SELECT s.name FROM "order" o JOIN order_status s ON s.id=o.status_id WHERE o.id = (SELECT id FROM _order)),
    '=',
    'processing'
);

-- order item must be in status 'ready' now
SELECT cmp_ok(
    (SELECT s.name FROM order_item oi JOIN order_item_status s ON s.id=oi.status_id WHERE oi.order_id = (SELECT id FROM _order)),
    '=',
    'ready'
);

-- there should be 2 items to be provisioned in the order_item_plan view
SELECT cmp_ok(
  (SELECT COUNT(*)::INT FROM f_order_item_plan((SELECT id FROM _oi_transfer_domain))),
  '=',
  2::INT
);

-- let's grab that provision_domain_transfer_in_request entry
WITH pdt AS (
    SELECT pdt.*, ps.name AS status_name
    FROM provision_domain_transfer_in_request pdt
        JOIN provision_status ps ON ps.id = pdt.status_id
    WHERE (
        SELECT id FROM f_order_item_plan((SELECT id FROM _oi_transfer_domain))
            WHERE object_name='domain' AND plan_status_name = 'processing'
    ) = ANY(order_item_plan_ids)
    AND ps.name = 'pending'
)
SELECT * INTO TEMP _prov_transfer_in_request FROM pdt;

-- there should be an entry in provision_domain_transfer_in_request that is pending to be provisioned
SELECT ok(
    EXISTS(
        SELECT * FROM _prov_transfer_in_request
    )
);

-- job should not be null
SELECT ok((SELECT job_id FROM _prov_transfer_in_request) IS NOT NULL,'job_id is not null');

-- let's update the job to see if it changes to pending_action
SELECT lives_ok($$
    UPDATE job SET status_id = tc_id_from_name('job_status','completed_conditionally')
        WHERE status_id=tc_id_from_name('job_status','submitted')
$$);

SELECT ok(
    (SELECT status_id = tc_id_from_name('provision_status', 'pending_action') FROM provision_domain_transfer_in_request pdt
            WHERE pdt.id=(SELECT id FROM _prov_transfer_in_request )),
    'provisioning domain transfer is pending action'
);


-- lets complete the provision domain transfer in request
SELECT lives_ok($$
    UPDATE provision_domain_transfer_in_request
    SET
        status_id = tc_id_from_name('provision_status','completed'),
        transfer_status_id = tc_id_from_name('transfer_status', 'clientApproved')
    WHERE id=(SELECT id FROM _prov_transfer_in_request)
$$);

-- ensure the event has been added
SELECT ok(
   EXISTS(
       SELECT 1
       FROM event
       WHERE payload->>'name' = (SELECT domain_name FROM _prov_transfer_in_request)
         AND payload->>'status' = 'clientApproved'
         AND type_id = tc_id_from_name('event_type', 'domain_transfer')
   ),
   'event for domain transfer in request has been added'
);

-- let's grab that provision_domain_transfer_in entry
WITH pdt AS (
    SELECT pdt.*, ps.name AS status_name
    FROM provision_domain_transfer_in pdt
        JOIN provision_status ps ON ps.id = pdt.status_id
    WHERE (
        SELECT id FROM f_order_item_plan((SELECT id FROM _oi_transfer_domain))
            WHERE object_name='domain' AND plan_status_name = 'processing'
    ) = ANY(order_item_plan_ids)
    AND ps.name = 'pending'
)
SELECT * INTO TEMP _prov_transfer_in FROM pdt;

-- there should be an entry in provision_domain_transfer_in that is pending to be provisioned
SELECT ok(
    EXISTS(
        SELECT * FROM _prov_transfer_in
    )
);

-- job should not be null
SELECT ok((SELECT job_id FROM _prov_transfer_in) IS NOT NULL,'job_id is not null');


-- lets update the provision domain transfer in to simulate fetched data
SELECT lives_ok($$
    UPDATE provision_domain_transfer_in
    SET
        ry_created_date     = NOW() - ('5 years')::INTERVAL,
        ry_expiry_date      = NOW() + ('1 years')::INTERVAL,
        ry_updated_date     = NOW(),
        ry_transfered_date  = NOW(),
        roid                = 'test-roid',
        hosts               = ARRAY['ns1.example.com', 'ns2.example.com']
    WHERE id=(SELECT id FROM _prov_transfer_in)
$$);

-- let's update the job to see if it changes to completed
SELECT lives_ok($$
    UPDATE job SET status_id = tc_id_from_name('job_status','completed')
        WHERE status_id=tc_id_from_name('job_status','submitted')
$$);

-- check rgp status set
SELECT ok(
    (SELECT rgp_epp_status = 'transferPeriod' FROM v_domain
            WHERE id=(SELECT id FROM _prov_transfer_in)),
    'domain rgp transfer_grace_period status is set'
);

-- order must be in status successful
SELECT cmp_ok(
    (SELECT order_status_name FROM v_order WHERE order_id=(SELECT id FROM _order)),
    '=',
    'successful'
);

-- finish testing
SELECT * FROM finish(true);

ROLLBACK;
