BEGIN;


-- start testing
SELECT * FROM no_plan();


-- create an order
WITH o AS (
    INSERT INTO "order"(
        tenant_customer_id,
        type_id
    )
    VALUES(
        (SELECT id FROM v_tenant_customer LIMIT 1),
        (SELECT id FROM v_order_type WHERE product_name='domain' AND name='create')
    ) RETURNING *
)
SELECT * INTO TEMP _order FROM o;


-- check that the order ID exists
SELECT ok((SELECT LENGTH(id::TEXT) > 0 FROM "order" WHERE id = (SELECT id FROM _order)),'is TRUE!');

-- by default order should have a created status
SELECT is(
    (SELECT name FROM order_status WHERE id=(SELECT status_id FROM _order)),
    'created',
    'order status is ''created'' by default'
);

-- create registrant contact

WITH oc AS (
    INSERT INTO order_contact (
        order_id,
        type_id,
        email,
        phone,
        fax,
        country,
        tenant_customer_id
    )
    VALUES( 
        (SELECT id FROM _order),
        tc_id_from_name('contact_type','individual'),
        'person@test.example', 
        '+555.5555551212',
        '+555.5555551213',
        'US',
        (SELECT id FROM v_tenant_customer LIMIT 1)
    ) RETURNING *
)
SELECT * INTO TEMP _reg_order_contact FROM oc;


-- postal data as well
WITH cp AS (
    INSERT INTO order_contact_postal
    (
        contact_id,
        is_international,
        first_name,
        last_name,
        address1,
        city,
        postal_code,
        state 
    )
    VALUES(
        (SELECT id FROM _reg_order_contact),
        TRUE,
        'John',
        'Smith',
        '555 Adress line',
        'Los Angeles',
        '90210',
        'California'
    ) RETURNING *
)
SELECT * INTO TEMP _reg_order_contact_postal FROM cp;

-- create billing contact
WITH oc AS (
    INSERT INTO order_contact (
        order_id,
        type_id,
        email,
        phone,
        fax,
        country,
        tenant_customer_id
    )
    VALUES( 
        (SELECT id FROM _order),
        tc_id_from_name('contact_type','individual'),
        'person@test.example', 
        '+555.5555551212',
        '+555.5555551213',
        'US',
        (SELECT id FROM v_tenant_customer LIMIT 1)
    ) RETURNING *
)
SELECT * INTO TEMP _bill_order_contact FROM oc;


-- postal data as well
WITH cp AS (
    INSERT INTO order_contact_postal
    (
        contact_id,
        is_international,
        first_name,
        last_name,
        address1,
        city,
        postal_code,
        state 
    )
    VALUES(
        (SELECT id FROM _bill_order_contact),
        TRUE,
        'John',
        'Smith',
        '555 Adress line',
        'Los Angeles',
        '90210',
        'California'
    ) RETURNING *
)
SELECT * INTO TEMP _bill_order_contact_postal FROM cp;

-- now we add the order item
CREATE SEQUENCE IF NOT EXISTS domain_counter;

WITH cd AS (
    INSERT INTO order_item_create_domain(order_id,name)
        VALUES((SELECT id FROM _order),FORMAT('tdp-test-%s-%s.help',NEXTVAL('domain_counter'),EXTRACT(epoch from NOW())::INT)) RETURNING *
)
SELECT * INTO TEMP _oi_create_domain FROM cd;

-- make sure billing is not supported contact type_id
INSERT INTO attr_value(
    key_id, 
    value_text_list, 
    tld_id, 
    tenant_id
) VALUES (
    (SELECT id FROM attr_key WHERE name = 'optional_contact_types'),
    ARRAY['tech'],
    (SELECT id FROM tld WHERE name = 'help'),
    (SELECT tenant_id FROM v_tenant_customer limit 1)
);

-- add the contacts for mandatory contact types registrant
SELECT lives_ok($$
    INSERT INTO create_domain_contact(
        create_domain_id,
        domain_contact_type_id,
        order_contact_id
    )
    VALUES
    (
        (SELECT id FROM _oi_create_domain),
        tc_id_from_name('domain_contact_type','registrant'),
        (SELECT id FROM _reg_order_contact)
    );
$$,'insert reg contact record in create_domain_contact');

-- add the contacts for not supported contact types billing
SELECT lives_ok($$
    INSERT INTO create_domain_contact(
        create_domain_id,
        domain_contact_type_id,
        order_contact_id
    )
    VALUES
    (
        (SELECT id FROM _oi_create_domain),
        tc_id_from_name('domain_contact_type','billing'),
        (SELECT id FROM _bill_order_contact)
    );
$$,'insert bill contact record in create_domain_contact');


-- the order should now be set to processing
SELECT lives_ok($$
    UPDATE "order" SET status_id = order_next_status((SELECT id FROM _order),TRUE) WHERE id=(SELECT id FROM _order);
$$,'move order to next status (pending->processing)');


-- order must be in status processing
SELECT cmp_ok( 
    (SELECT s.name FROM "order" o JOIN order_status s ON s.id=o.status_id WHERE o.id = (SELECT id FROM _order)),
    '=',
    'processing'
);

-- order item must be in status 'ready' now
SELECT cmp_ok( 
    (SELECT s.name FROM order_item oi JOIN order_item_status s ON s.id=oi.status_id WHERE oi.order_id = (SELECT id FROM _order)),
    '=',
    'ready'
);

-- there should be 3 items to be provisioned in the order_item_plan view
SELECT cmp_ok(
  (SELECT COUNT(*)::INT FROM f_order_item_plan((SELECT id FROM _oi_create_domain))),
  '=',
  3::INT
);

-- let's update the validate_domain_available job to see if it changes to complete
SELECT lives_ok($$
    UPDATE job
    SET status_id = tc_id_from_name('job_status','completed')
    WHERE id = ( 
        SELECT job_id
        FROM v_job vj 
        JOIN create_domain_plan cdp ON cdp.id = vj.reference_id
        WHERE cdp.order_item_id = (SELECT id FROM _oi_create_domain)
            AND vj.job_type_name = 'validate_domain_available'
            AND vj.job_status_name = 'submitted'
    ) 
$$);

-- let's grab that registrant provision_contact entry
WITH pc AS (
    SELECT pc.*,ps.name AS status_name 
    FROM provision_contact pc
        JOIN provision_status ps ON ps.id = pc.status_id
    WHERE ps.name = 'pending'
        AND pc.contact_id = (SELECT id FROM _reg_order_contact)
)
SELECT * INTO TEMP _reg_prov_contact FROM pc;

-- there should be an entry in provision_contact that is pending to be provisioned for registrant
SELECT ok(
    EXISTS(
        SELECT * FROM _reg_prov_contact
    ) 
);

-- let's grab that billing provision_contact entry
WITH pc AS (
    SELECT pc.*,ps.name AS status_name 
    FROM provision_contact pc
        JOIN provision_status ps ON ps.id = pc.status_id
    WHERE ps.name = 'pending'
        AND pc.contact_id = (SELECT id FROM _bill_order_contact)
)
SELECT * INTO TEMP _bill_prov_contact FROM pc;

-- there should be no entry in provision_contact that is pending to be provisioned for billing
SELECT ok(
    NOT EXISTS(
        SELECT * FROM _bill_prov_contact
    ) 
);

-- finish testing
SELECT * FROM finish(true);

--COMMIT;
ROLLBACK;
