BEGIN;

-- start testing
SELECT * FROM no_plan();

-- clean attr_value table
DELETE FROM attr_value;

-- update secdns record range for .help TLD
INSERT INTO attr_value(
    key_id, 
    value_integer_range, 
    tld_id, 
    tenant_id
) VALUES (
    (SELECT id FROM attr_key WHERE name = 'secdns_record_count'),
    int4range(0, 5, '[]'),
    (SELECT id FROM tld WHERE name = 'help'),
    (SELECT tenant_id FROM v_tenant_customer limit 1)
);

CREATE SEQUENCE IF NOT EXISTS domain_counter;

-- create a host parent domain entry for testing
SELECT accreditation_tld_id as id INTO TEMP _acc_tld
FROM v_accreditation_tld
WHERE tld_name = 'help'
  AND tenant_id=(SELECT tenant_id FROM v_tenant_customer limit 1)
  AND is_default;

WITH test_domain AS (
    INSERT INTO domain(
        tenant_customer_id,
        name,
        accreditation_tld_id,
        ry_created_date,
        ry_expiry_date,
        expiry_date
    ) VALUES (
        (SELECT id FROM v_tenant_customer LIMIT 1),
        FORMAT('host-parent-domain-%s-1.help',EXTRACT(epoch from NOW())::INT),
        (SELECT id FROM _acc_tld),
        NOW(),
        NOW() + ('1 years')::INTERVAL,
        NOW() + ('1 years')::INTERVAL
    ) RETURNING *
)
SELECT * INTO TEMP _host_parent_domain FROM test_domain;


-- create an order
WITH o AS (
    INSERT INTO "order"(
        tenant_customer_id,
        type_id
    )
    VALUES(
        (SELECT id FROM v_tenant_customer LIMIT 1),
        (SELECT id FROM v_order_type WHERE product_name='domain' AND name='create')
    ) RETURNING *
)
SELECT * INTO TEMP _order FROM o;


-- check that the order ID exists
SELECT ok((SELECT LENGTH(id::TEXT) > 0 FROM "order" WHERE id = (SELECT id FROM _order)),'is TRUE!');

-- by default order should have a created status
SELECT is(
    (SELECT name FROM order_status WHERE id=(SELECT status_id FROM _order)),
    'created',
    'order status is ''created'' by default'
);

-- disable validation for create domain (domain, host objects)
SELECT lives_ok($$
    UPDATE order_item_strategy SET is_validation_required = FALSE WHERE order_type_id = (SELECT type_id FROM _order);
$$,'bypass domain and host validation for this test');

-- now we add the order item (order_item_create_domain)
CREATE SEQUENCE IF NOT EXISTS domain_counter;
WITH cd AS (
    INSERT INTO order_item_create_domain(order_id, name, secdns_max_sig_life) 
        VALUES(
            (SELECT id FROM _order),
            FORMAT('tdp-test-%s-%s.help',NEXTVAL('domain_counter'),EXTRACT(epoch from NOW())::INT),
            5    
        ) RETURNING *
)
SELECT * INTO TEMP _oi_create_domain FROM cd;


-- create a contact (personal)
WITH oc AS (
    INSERT INTO order_contact (
        order_id,
        type_id,
        email,
        phone,
        fax,
        country,
        tenant_customer_id
    )
    VALUES( 
        (SELECT id FROM _order),
        tc_id_from_name('contact_type','individual'),
        'person@test.example', 
        '+555.5555551212',
        '+555.5555551213',
        'US',
        (SELECT id FROM v_tenant_customer LIMIT 1)
    ) RETURNING *
)
SELECT * INTO TEMP _order_contact FROM oc;


-- postal data as well
WITH cp AS (
    INSERT INTO order_contact_postal
    (
        contact_id,
        is_international,
        first_name,
        last_name,
        address1,
        city,
        postal_code,
        state 
    )
    VALUES(
        (SELECT id FROM _order_contact),
        TRUE,
        'John',
        'Smith',
        '555 Adress line',
        'Los Angeles',
        '90210',
        'California'
    ) RETURNING *
)
SELECT * INTO TEMP _order_contact_postal FROM cp;


-- create a host
WITH oh AS (
    INSERT INTO order_host (
        "name",
         tenant_customer_id        
    )
    VALUES(    
       'ns1.' || (SELECT name FROM _host_parent_domain),
       (SELECT id FROM v_tenant_customer LIMIT 1)
    ) RETURNING *
)
SELECT * INTO TEMP _order_host FROM oh;

-- add the host address 
SELECT lives_ok($$
    INSERT INTO order_host_addr(
        host_id,
        address
    )
    (
           SELECT 
             (SELECT id FROM _order_host),
             a.addr 
        FROM ( SELECT addr FROM (
                        VALUES
                            ('192.168.1.100'::INET),
                            ('192.168.1.101'::INET)
                        ) AS t (addr)
            )a
    )
$$,'insert record in order_host_addr');


-- add the domain contacts 
SELECT lives_ok($$
    INSERT INTO create_domain_contact(
        create_domain_id,
        domain_contact_type_id,
        order_contact_id
    )
    VALUES
    (
        (SELECT id FROM _oi_create_domain),
        tc_id_from_name('domain_contact_type','registrant'),
        (SELECT id FROM _order_contact)
    );
$$,'insert record in create_domain_contact');


-- add the domain nameservers 
SELECT lives_ok($$
    INSERT INTO create_domain_nameserver(
        create_domain_id,        
        host_id
    )
    VALUES(
        (SELECT id FROM _oi_create_domain),
        (SELECT id FROM _order_host)
    );
$$,'insert record in create_domain_nameserver');

-- add secdns records
WITH oskd AS (
    INSERT INTO order_secdns_key_data(flags, algorithm, public_key)
    VALUES (0, 3, 'test-public-key')
    RETURNING *
)
SELECT * INTO TEMP _order_secdns_key_data FROM oskd;
	
WITH osdd AS (
    INSERT INTO order_secdns_ds_data(key_tag, algorithm, digest, key_data_id)
    VALUES (1, 3, 'test-digest', (SELECT id FROM _order_secdns_key_data))
    RETURNING *
)
SELECT * INTO TEMP _order_secdns_ds_data FROM osdd;

-- update secdns supported list for .help TLD
INSERT INTO attr_value(
    key_id, 
    value_text_list, 
    tld_id, 
    tenant_id
) VALUES (
    (SELECT id FROM attr_key WHERE name = 'secdns_supported'),
    ARRAY['dsData', 'keyData'],
    (SELECT id FROM tld WHERE name = 'help'),
    (SELECT tenant_id FROM v_tenant_customer limit 1)
);
    
INSERT INTO create_domain_secdns (create_domain_id, ds_data_id)
VALUES ((SELECT id FROM _oi_create_domain), (SELECT id FROM _order_secdns_ds_data));

WITH osdd2 AS (
   	INSERT INTO order_secdns_ds_data (key_tag, algorithm, digest)
    VALUES (1, 5, 'test-digest')
    RETURNING *
)
SELECT * INTO TEMP _order_secdns_ds_data2 FROM osdd2;

-- update secdns supported list for .help TLD
UPDATE attr_value 
    SET value_text_list=ARRAY['dsData'] 
    WHERE key_id=(SELECT id FROM attr_key WHERE name = 'secdns_supported');

INSERT INTO create_domain_secdns (create_domain_id, ds_data_id)
VALUES ((SELECT id FROM _oi_create_domain), (SELECT id FROM _order_secdns_ds_data2));



-- the order should now be set to processing
SELECT lives_ok($$
    UPDATE "order" SET status_id = order_next_status((SELECT id FROM _order),TRUE) WHERE id=(SELECT id FROM _order);
$$,'move order to next status (pending->processing)');

-- order must be in status processing
SELECT cmp_ok( 
    (SELECT s.name FROM "order" o JOIN order_status s ON s.id=o.status_id WHERE o.id = (SELECT id FROM _order)),
    '=',
    'processing'
);

-- order item must be in status 'ready' now
SELECT cmp_ok( 
    (SELECT s.name FROM order_item oi JOIN order_item_status s ON s.id=oi.status_id WHERE oi.order_id = (SELECT id FROM _order)),
    '=',
    'ready'
);

-- there should be 3 items to be provisioned in the order_item_plan view
SELECT cmp_ok(
  (SELECT COUNT(*)::INT FROM f_order_item_plan((SELECT id FROM _oi_create_domain))),
  '=',
  3::INT
);


-- let's grab that provision_host entry
WITH ph AS (
    SELECT h.*,ps.name AS status_name 
    FROM provision_host h
        JOIN provision_status ps ON ps.id = h.status_id
    WHERE (
        SELECT id FROM f_order_item_plan((SELECT id FROM _oi_create_domain)) 
            WHERE object_name='host'
    ) = ANY(order_item_plan_ids) 
    AND ps.name = 'pending'
)
SELECT * INTO TEMP _prov_host FROM ph;

-- let's grab that provision_contact entry
WITH pc AS (
    SELECT pc.*,ps.name AS status_name 
    FROM provision_contact pc
        JOIN provision_status ps ON ps.id = pc.status_id
    WHERE (
        SELECT id FROM f_order_item_plan((SELECT id FROM _oi_create_domain))
            WHERE object_name='contact'
    ) = ANY(order_item_plan_ids) 
    AND ps.name = 'pending'
)
SELECT * INTO TEMP _prov_contact FROM pc;

-- there should be a contact entry in provision_contact that is pending to be provisioned
SELECT ok(
    EXISTS(
        SELECT * FROM _prov_contact
    ) 
);

-- job should not be null
SELECT ok((SELECT job_id FROM _prov_contact) IS NOT NULL,'job_id is not null');


-- let's update the job to see if it changes to complete
SELECT lives_ok($$
    UPDATE job SET status_id = tc_id_from_name('job_status','completed')
        WHERE status_id=tc_id_from_name('job_status','submitted')
$$);

-- provisioned date should be set on host
SELECT ok(
    (SELECT provisioned_date IS NOT NULL FROM provision_host WHERE id=(SELECT id FROM _prov_host)),
    'provisioned date was set on provision_host' 
);

-- provisioned date should be set on contact
SELECT ok(
    (SELECT provisioned_date IS NOT NULL FROM provision_contact WHERE id=(SELECT id FROM _prov_contact)),
    'provisioned date was set on provision_contact' 
);

-- status must be successful
SELECT ok(
    (SELECT s.is_success AND s.is_final 
        FROM provision_host h 
            JOIN provision_status s ON h.status_id=s.id 
        WHERE h.id=(SELECT hh.id FROM _prov_host hh)),
    'status is set to success and final on host' 
);

SELECT ok(
    (SELECT s.is_success AND s.is_final 
        FROM provision_contact c 
            JOIN provision_status s ON c.status_id=s.id 
        WHERE c.id=(SELECT id FROM _prov_contact )),
    'status is set to success and final on contact' 
);

-- let's update the provision_contact to simulate handle presence
SELECT lives_ok($$
    UPDATE provision_contact SET handle = '3de54hq2db5'
        WHERE id=(SELECT id FROM _prov_contact)
$$);

SELECT ok(
    (SELECT plan_status_name = 'completed' FROM f_order_item_plan((SELECT d.id FROM _oi_create_domain d)) 
            WHERE object_name='host'),
    'host order_item_plan completed successfully'
);

SELECT ok(
    (SELECT plan_status_name = 'completed' FROM f_order_item_plan((SELECT d.id FROM _oi_create_domain d)) 
            WHERE object_name='contact'),
    'contact order_item_plan completed successfully'
);


-- now let's process the domain 
-- there should be a job of status 'submitted' for the domain 
SELECT ok(
    EXISTS (
        SELECT 1
        FROM v_job 
        WHERE 
            job_type_name='provision_domain_create'
            AND job_status_name ='submitted'
    )
);

SELECT lives_ok($$
    UPDATE job SET status_id = tc_id_from_name('job_status','completed')
        WHERE status_id=tc_id_from_name('job_status','submitted')
$$);

-- check rgp status set
SELECT ok(
    (SELECT rgp_epp_status = 'addPeriod' FROM v_domain 
            WHERE  name=(SELECT d.name FROM _oi_create_domain d)),
    'domain rgp add_grace_period status is set'
);

-- get domain id

WITH domain_id as (SELECT id FROM domain WHERE name = (SELECT name FROM _oi_create_domain)) 
SELECT id INTO TEMP _domain_id FROM domain_id;

-- should have 2 secdns records 

SELECT cmp_ok(
  ((SELECT COUNT(*)::INT FROM domain_secdns WHERE domain_id = (SELECT id FROM _domain_id))),
  '=',
  2::INT
);

-- order should now be complete 
SELECT ok( 
        order_status_is_final 
        AND 
        order_status_is_success
    )
    FROM v_order
    WHERE order_id=(SELECT id FROM _order);


-- finish testing
SELECT * FROM finish(true);

-- COMMIT;
ROLLBACK;
