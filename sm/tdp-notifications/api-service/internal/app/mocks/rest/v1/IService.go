// Code generated by mockery v2.51.1. DO NOT EDIT.

package v1restmock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gcontext "github.com/tucowsinc/tdp-notifications/api-service/internal/pkg/gcontext"

	models "github.com/tucowsinc/tdp-notifications/api-service/internal/app/models"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

// CreateNotification provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *IService) CreateNotification(_a0 context.Context, _a1 string, _a2 map[string]interface{}, _a3 *gcontext.BaseHeader) (string, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotification")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, *gcontext.BaseHeader) (string, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, *gcontext.BaseHeader) string); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}, *gcontext.BaseHeader) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *IService) CreateSubscription(_a0 context.Context, _a1 *models.SubscriptionCreateRequest, _a2 map[string]interface{}, _a3 *gcontext.BaseHeader) (*models.SubscriptionCreateResponse, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 *models.SubscriptionCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SubscriptionCreateRequest, map[string]interface{}, *gcontext.BaseHeader) (*models.SubscriptionCreateResponse, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.SubscriptionCreateRequest, map[string]interface{}, *gcontext.BaseHeader) *models.SubscriptionCreateResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SubscriptionCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.SubscriptionCreateRequest, map[string]interface{}, *gcontext.BaseHeader) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscription provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *IService) DeleteSubscription(_a0 context.Context, _a1 *models.SubscriptionDeleteParameter, _a2 map[string]interface{}, _a3 *gcontext.BaseHeader) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SubscriptionDeleteParameter, map[string]interface{}, *gcontext.BaseHeader) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSubscription provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *IService) GetSubscription(_a0 context.Context, _a1 *models.SubscriptionGetParameter, _a2 map[string]interface{}, _a3 *gcontext.BaseHeader) (*models.SubscriptionGetResponse, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 *models.SubscriptionGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SubscriptionGetParameter, map[string]interface{}, *gcontext.BaseHeader) (*models.SubscriptionGetResponse, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.SubscriptionGetParameter, map[string]interface{}, *gcontext.BaseHeader) *models.SubscriptionGetResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SubscriptionGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.SubscriptionGetParameter, map[string]interface{}, *gcontext.BaseHeader) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptions provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *IService) GetSubscriptions(_a0 context.Context, _a1 *models.SubscriptionsGetParameter, _a2 map[string]interface{}, _a3 *gcontext.BaseHeader) (*models.SubscriptionsGetResponse, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptions")
	}

	var r0 *models.SubscriptionsGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SubscriptionsGetParameter, map[string]interface{}, *gcontext.BaseHeader) (*models.SubscriptionsGetResponse, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.SubscriptionsGetParameter, map[string]interface{}, *gcontext.BaseHeader) *models.SubscriptionsGetResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SubscriptionsGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.SubscriptionsGetParameter, map[string]interface{}, *gcontext.BaseHeader) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PauseSubscription provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *IService) PauseSubscription(_a0 context.Context, _a1 *models.SubscriptionPauseParameter, _a2 map[string]interface{}, _a3 *gcontext.BaseHeader) (*models.SubscriptionPauseResponse, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for PauseSubscription")
	}

	var r0 *models.SubscriptionPauseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SubscriptionPauseParameter, map[string]interface{}, *gcontext.BaseHeader) (*models.SubscriptionPauseResponse, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.SubscriptionPauseParameter, map[string]interface{}, *gcontext.BaseHeader) *models.SubscriptionPauseResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SubscriptionPauseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.SubscriptionPauseParameter, map[string]interface{}, *gcontext.BaseHeader) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeSubscription provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *IService) ResumeSubscription(_a0 context.Context, _a1 *models.SubscriptionResumeParameter, _a2 map[string]interface{}, _a3 *gcontext.BaseHeader) (*models.SubscriptionResumeResponse, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for ResumeSubscription")
	}

	var r0 *models.SubscriptionResumeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SubscriptionResumeParameter, map[string]interface{}, *gcontext.BaseHeader) (*models.SubscriptionResumeResponse, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.SubscriptionResumeParameter, map[string]interface{}, *gcontext.BaseHeader) *models.SubscriptionResumeResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SubscriptionResumeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.SubscriptionResumeParameter, map[string]interface{}, *gcontext.BaseHeader) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscription provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *IService) UpdateSubscription(_a0 context.Context, _a1 *models.SubscriptionUpdateRequest, _a2 map[string]interface{}, _a3 *gcontext.BaseHeader) (*models.SubscriptionUpdateResponse, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscription")
	}

	var r0 *models.SubscriptionUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SubscriptionUpdateRequest, map[string]interface{}, *gcontext.BaseHeader) (*models.SubscriptionUpdateResponse, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.SubscriptionUpdateRequest, map[string]interface{}, *gcontext.BaseHeader) *models.SubscriptionUpdateResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SubscriptionUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.SubscriptionUpdateRequest, map[string]interface{}, *gcontext.BaseHeader) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIService creates a new instance of IService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IService {
	mock := &IService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
